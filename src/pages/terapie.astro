---
import RichTextRenderer from '@caisy/rich-text-astro-renderer';
import { gql, GraphQLClient } from 'graphql-request';
import Layout from "../layouts/Layout.astro";
import Hero from '../components/Hero.astro'
import TherapyTile from '../components/tiles/TherapyTile.astro';

const client = new GraphQLClient(
	`https://cloud.caisy.io/api/v3/e/${import.meta.env.CAISY_PROJECT_ID}/graphql`,
	{
		headers: {
			'x-caisy-apikey': import.meta.env.CAISY_API_KEY
		}
	}
);
const gqlResponse = await client.request(
	gql`
		query therapy {
			allTherapyReference {
    			edges {
      				node {
        				id
        				name
        				text {
          					json
        				}
      				}
    			}
  			}
  			Therapy {
    			introText {
      				json
    			}
    			problems {
      				json
    			}
				problemsTitle
				subTitle {
				 	json
				}
				therapyAndMeText {
				  	json
				}
				therapyAndMeTitle
				thoughtsText {
				  	json
				}
				thoughtsTitle
				workProcess {
				  	json
				}
				workProcessTitle
  			}
  		}
  	`,
);

const {introText, problems, problemsTitle, subTitle, workProcess, workProcessTitle} = gqlResponse?.Therapy
const {edges} = gqlResponse?.allTherapyReference
---

<Layout title='Simply bee - Terapie'>
	<Hero background='bg-therapy.jpg' color='therapy-opacity' subTitle={subTitle} Tile={TherapyTile} title='Terapie' type="therapy" />
	<section class="section">
		<div class="sectionContent">
			<p><RichTextRenderer node={introText.json} /></p>
		</div>
	</section>
	<section class="section section--odd section--therapy">
		<div class="sectionContent">
			<h2 class="sectionTitle">{problemsTitle}</h2>
			<p><RichTextRenderer node={problems.json} /></p>
		</div>
	</section>
	<section class="section">
		<div class="sectionContent">
			<h2 class="sectionTitle">{workProcessTitle}</h2>
			<p><RichTextRenderer node={workProcess.json} /></p>
		</div>
	</section>
	<section class="section section--odd section--therapy">
		<div class="sectionContent">
			<h2 class="sectionTitle">Reference</h2>
			<div class="swiper">
				<div class="swiper-wrapper">
					{edges.map(({node}) => {
						return (<li class="swiper-slide">
							<p><RichTextRenderer node={node.text.json} /></p>
							<p class="referenceName">{node.name}</p>
						</li>)
					})}
				</div>
				<div class="swiper-pagination"></div>
				<div class="swiper-button-prev"></div>
				<div class="swiper-button-next"></div>
			</div>
		</div>
	</section>
</Layout>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script is:inline src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
<script is:inline>new Swiper('.swiper', {
	autoplay: {
		delay: 5000,
		pauseOnMouseEnter: true,
	},
	loop: true,
	pagination: {
		enabled: false,
	},
	navigation: {
		nextEl: '.swiper-button-next',
		prevEl: '.swiper-button-prev',
	},
	centeredSlides: true,
	effect: 'cards',
})</script>
<style>
	:root {
		--swiper-navigation-size: 30px;
		--swiper-navigation-top-offset: 50%;
		--swiper-navigation-sides-offset: -80px;
		--swiper-navigation-color: var(--color-main);
	}
</style>